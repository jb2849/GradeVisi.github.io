library(ggplot2)
library(shiny)
library(htmlwidgets)
library(htmltools)
library(reshape2)
library(plotly)
library(dplyr)
###
#Initialization of list
data_loc <- "C:/Users/bjcfa/Desktop/ShinyforGrade/data"
setwd("C:/Users/bjcfa/Desktop/ShinyforGrade")
list <- list.files("C:/Users/bjcfa/Desktop/ShinyforGrade/data")
data <- list()
per <- c("Withdrew" ,"Audit" ,"Other","X.50","X50.54","X55.59"    ,"X60.63" ,   "X64.67" ,   "X68.71"  ,  "X72.75"  ,  "X76.79" ,  "X80.84"  ,  "X85.89"  ,  "X90.100")
###
merge_per <- function(x){
x <- data.frame(x)
gg <- data.frame()
gg$Professor <- x$Professor
gg$others <- x$Withdrew + x$Audit+ x$Other
gg$`<50` <- x$X.50
gg$`50~59` <- x$X50.54 + x$X55.59
gg$`60~71` <- x$X60.63 + x$X64.67 + x$X68.71
gg$`72~79` <- x$X72.75 + x$X76.79
gg$`80~89` <- x$X80.84 + x$X85.89
gg$`90~100` <- x$X90.100
return(gg)
}
init <- function(soci){
soci$Course <- as.factor(soci$Course)
soci <- soci[!soci$Section %in% "OVERALL",]
soci$Professor <- factor(soci$Professor)
return(soci)
}
init_overall <- function(soci){
soci$Course <- as.factor(soci$Course)
soci <- soci[soci$Section %in% "OVERALL",]
soci$Professor <- factor(soci$Professor)
return(soci)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#for(i in list){
#        data[[i]] <- init(read.csv(paste(data_loc,"/",i,sep = "")))
#}
# Chunk 2
## The shiny part
inputPanel(
selectInput("subject", label = "Subject",
list))
activeDataset <- reactive({
return(init(read.csv(paste(data_loc,"/",input$subject,sep = ""))))
})
activeDataset_overall <- reactive({
return(init_overall(read.csv(paste(data_loc,"/",input$subject,sep = ""))))
})
get_course_list <- reactive({
temp <- activeDataset()
return(temp[,"Course"])
})
renderUI({
selectInput("Course", "Select Course Number", get_course_list() )
})
# Chunk 3
DT::renderDataTable({
#t_m <- init(read.csv(paste(data_loc,"/",input$subject,sep = "")))
t_m <- activeDataset()
t_m <- t_m[t_m$Course %in% input$Course,]
t_m <- t_m[,c("Subject","Course","Section","Title","Professor", "Avg","High","Low", "Std.dev")]
DT::datatable(t_m, rownames = FALSE,options = list(scrollX = TRUE,pageLength = 5,lengthMenu = c(5, 8)))
})
# Chunk 4
renderPlot({
t_m <- activeDataset_overall()
t_m <- t_m[t_m$Course %in% input$Course,]
t_m$Professor <- paste(t_m$Professor, t_m$Section, sep = "_")
title <- t_m[1,c("Subject","Course")]
temp_title <- paste(title[1,1],title[1,2],sep = "")
t_m <- t_m[,c("Professor", per)]
t_m <- merge_per(t_m)
mdf <- melt(t_m, id = "Professor")
#p <- list()
# for(i in 1:nrow(t_m)){
#         mdf <- melt(t_m[1,], id = "Professor")
#         p[[i]] <- ggplot(mdf, aes(x = factor(1), fill = factor(value))) +geom_bar(width = 1)+coord_polar(theta = "y")
# }
ggpie <- function (dat, by, totals) {
ggplot(dat, aes_string(x=factor(1), y=totals, fill=by)) +
geom_bar(stat='identity', color='black') +
guides(fill=guide_legend(override.aes=list(colour=NA))) + # removes black borders from legend
coord_polar(theta='y') +
theme(axis.ticks=element_blank(),
axis.text.y=element_blank(),
axis.text.x=element_text(colour='black'),
axis.title=element_blank()) #+
+ scale_y_continuous(breaks=cumsum(dat[[totals]]) - dat[[totals]] / 2, labels=dat[[by]])
}
library(grid)
ggpie(mdf, by='variable', totals='value')+
theme(axis.ticks.margin=unit(0,"lines"),
plot.margin=rep(unit(0, "lines"),4))
})
merge_per(temp1)
str(temp1)
gg$others <- temp1$Withdrew +temp$Audit + temp1$Other
gg <- data.frame()
gg$others <- temp1$Withdrew +temp$Audit + temp1$Other
gg$others <- sum(temp1$Withdrew,temp$Audit,temp1$Other)
g <- temp1$Other
View(temp1)
g
temp1$Withdrew +temp$Audit + temp1$Other
gg$Professor <- NA
?data.frame
new_per <- c("Others", "<50", "50~59", "60~70", "72~79", "80~89","90~100")
gg <- data.frame(new_per)
View(gg)
`<50` <- 60
`<50`
renderPlot({
t_m <- activeDataset()
t_m <- t_m[t_m$Course %in% input$Course,]
t_m$Professor <- paste(t_m$Professor, t_m$Section, sep = "_")
title <- t_m[1,c("Subject","Course")]
temp_title <- paste(title[1,1],title[1,2],sep = "")
t_m <- t_m[,c("Professor","Avg","High","Low")]
mdf <- melt(t_m, id = "Professor")
p <- ggplot(data=mdf, aes(x=Professor, y=value, fill=variable, group = variable)) + geom_bar(stat="identity",position=position_dodge())  + theme(axis.text = element_text(size = 15), axis.title = element_text(size = 15), legend.text = element_text(size = 10), legend.position = "top") + labs( x = "Professors", y = "Grades") +guides(fill=guide_legend(title=NULL)) + coord_cartesian(ylim = c(0, 105)) + scale_y_continuous(minor_breaks = seq(0 , 100, 5), breaks = seq(0, 100, 10))
p
})
merge_per(temp1)
merge_per <- function(x){
x <- data.frame(x)
gg <- data.frame()
Professor <- x$Professor
Others <- x$Withdrew + x$Audit+ x$Other
`<50` <- x$X.50
`50~59` <- x$X50.54 + x$X55.59
`60~71` <- x$X60.63 + x$X64.67 + x$X68.71
`72~79` <- x$X72.75 + x$X76.79
`80~89` <- x$X80.84 + x$X85.89
`90~100` <- x$X90.100
return(data.frame(Professor,Others,`<50`, `50~59`, `60~70`, `72~79`, `80~89`,`90~100`))
}
merge_per(temp1)
x <- temp1
Professor <- x$Professor
Others <- x$Withdrew + x$Audit+ x$Other
`<50` <- x$X.50
`50~59` <- x$X50.54 + x$X55.59
`60~71` <- x$X60.63 + x$X64.67 + x$X68.71
`72~79` <- x$X72.75 + x$X76.79
`80~89` <- x$X80.84 + x$X85.89
`90~100` <- x$X90.100
data.frame(Professor,Others,`<50`, `50~59`, `60~70`, `72~79`, `80~89`,`90~100`)
data.frame(Professor,Others,`<50`, `50~59`, `60~70`, `72~79`, `80~89`,`90~100`)
data.frame(Professor,Others,`<50`, `50~59`, `60~71`, `72~79`, `80~89`,`90~100`)
gg <- data.frame(Professor,Others,`<50`, `50~59`, `60~71`, `72~79`, `80~89`,`90~100`)
mdf <- melt(gg, id = "Professor")
View(mdf)
ggpie(mdf, by='variable', totals='value')+
theme(axis.ticks.margin=unit(0,"lines"),
plot.margin=rep(unit(0, "lines"),4))
ggpie <- function (dat, by, totals) {
ggplot(dat, aes_string(x=factor(1), y=totals, fill=by)) +
geom_bar(stat='identity', color='black') +
guides(fill=guide_legend(override.aes=list(colour=NA))) + # removes black borders from legend
coord_polar(theta='y') +
theme(axis.ticks=element_blank(),
axis.text.y=element_blank(),
axis.text.x=element_text(colour='black'),
axis.title=element_blank()) #+
+ scale_y_continuous(breaks=cumsum(dat[[totals]]) - dat[[totals]] / 2, labels=dat[[by]])
}
library(grid)
ggpie(mdf, by='variable', totals='value')+
theme(axis.ticks.margin=unit(0,"lines"),
plot.margin=rep(unit(0, "lines"),4))
View(mdf)
p <- ggplot(mdf, aes(x=1, y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("How I've spent my PhD hours this week")
print(p)
p <- p + coord_polar(theta='y')
print(p)
p <- ggplot(mdf, aes(x=factor(1), y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("How I've spent my PhD hours this week")
print(p)
p <- p + coord_polar(theta='y')
p <- ggplot(mdf, aes(x=factor(1), y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("How I've spent my PhD hours this week")
print(p)
p <- p + coord_polar(theta='y')
print(p)
p <- p +
# black border around pie slices
geom_bar(stat="identity", color='black') +
# remove black diagonal line from legend
guides(fill=guide_legend(override.aes=list(colour=NA)))
print(p)
p <- p +
theme(axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
axis.text.y=element_blank()) # the 0.75, 1.00, 1.25 labels.
print(p)
# Chunk 1: setup
library(flexdashboard)
library(ggplot2)
library(shiny)
library(htmlwidgets)
library(htmltools)
library(reshape2)
library(plotly)
library(dplyr)
###
#Initialization of list
data_loc <- "C:/Users/bjcfa/Desktop/ShinyforGrade/data"
setwd("C:/Users/bjcfa/Desktop/ShinyforGrade")
list <- list.files("C:/Users/bjcfa/Desktop/ShinyforGrade/data")
data <- list()
per <- c("Withdrew" ,"Audit" ,"Other","X.50","X50.54","X55.59"    ,"X60.63" ,   "X64.67" ,   "X68.71"  ,  "X72.75"  ,  "X76.79" ,  "X80.84"  ,  "X85.89"  ,  "X90.100")
new_per <- c("Others", "<50", "50~59", "60~71", "72~79", "80~89","90~100")
###
merge_per <- function(x){
x <- data.frame(x)
gg <- data.frame()
Professor <- x$Professor
Others <- x$Withdrew + x$Audit+ x$Other
`<50` <- x$X.50
`50~59` <- x$X50.54 + x$X55.59
`60~71` <- x$X60.63 + x$X64.67 + x$X68.71
`72~79` <- x$X72.75 + x$X76.79
`80~89` <- x$X80.84 + x$X85.89
`90~100` <- x$X90.100
return(data.frame(Professor,Others,`<50`, `50~59`, `60~71`, `72~79`, `80~89`,`90~100`))
}
init <- function(soci){
soci$Course <- as.factor(soci$Course)
soci <- soci[!soci$Section %in% "OVERALL",]
soci$Professor <- factor(soci$Professor)
return(soci)
}
init_overall <- function(soci){
soci$Course <- as.factor(soci$Course)
soci <- soci[soci$Section %in% "OVERALL",]
soci$Professor <- factor(soci$Professor)
return(soci)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#for(i in list){
#        data[[i]] <- init(read.csv(paste(data_loc,"/",i,sep = "")))
#}
# Chunk 2
## The shiny part
inputPanel(
selectInput("subject", label = "Subject",
list))
activeDataset <- reactive({
return(init(read.csv(paste(data_loc,"/",input$subject,sep = ""))))
})
activeDataset_overall <- reactive({
return(init_overall(read.csv(paste(data_loc,"/",input$subject,sep = ""))))
})
get_course_list <- reactive({
temp <- activeDataset()
return(temp[,"Course"])
})
renderUI({
selectInput("Course", "Select Course Number", get_course_list() )
})
# Chunk 3
DT::renderDataTable({
#t_m <- init(read.csv(paste(data_loc,"/",input$subject,sep = "")))
t_m <- activeDataset()
t_m <- t_m[t_m$Course %in% input$Course,]
t_m <- t_m[,c("Subject","Course","Section","Title","Professor", "Avg","High","Low", "Std.dev")]
DT::datatable(t_m, rownames = FALSE,options = list(scrollX = TRUE,pageLength = 5,lengthMenu = c(5, 8)))
})
df <- mdf %>% group_by(variable) %>% mutate(pos = cumsum(value)- value/2)
View(df)
View(df)
mdf$pos <- mdf$value/2 + c(0,  cumsum(mdf$value)[-length(mdf$value)])
View(mdf)
library (scales)
percent(mdf$value)
mdf$value
mdf$pos <-  mdf %>% group_by(variable) %>% mutate(pos=cumsum(value)-0.5*value)
View(mdf)
View(mdf)
View(t_m)
n(t_m)
summarize(counts = n(t_m))
n()
# Chunk 1: setup
library(flexdashboard)
library(ggplot2)
library(shiny)
library(htmlwidgets)
library(htmltools)
library(reshape2)
library(dplyr)
library (scales)
###
#Initialization of list
data_loc <- "C:/Users/bjcfa/Desktop/ShinyforGrade/data"
setwd("C:/Users/bjcfa/Desktop/ShinyforGrade")
list <- list.files("C:/Users/bjcfa/Desktop/ShinyforGrade/data")
data <- list()
per <- c("Withdrew" ,"Audit" ,"Other","X.50","X50.54","X55.59"    ,"X60.63" ,   "X64.67" ,   "X68.71"  ,  "X72.75"  ,  "X76.79" ,  "X80.84"  ,  "X85.89"  ,  "X90.100")
new_per <- c("Others", "<50", "50~59", "60~71", "72~79", "80~89","90~100")
###
merge_per <- function(x){
x <- data.frame(x)
gg <- data.frame()
Professor <- x$Professor
Others <- x$Withdrew + x$Audit+ x$Other
`<50` <- x$X.50
`50~59` <- x$X50.54 + x$X55.59
`60~71` <- x$X60.63 + x$X64.67 + x$X68.71
`72~79` <- x$X72.75 + x$X76.79
`80~89` <- x$X80.84 + x$X85.89
`90~100` <- x$X90.100
return(data.frame(Professor,Others,`<50`, `50~59`, `60~71`, `72~79`, `80~89`,`90~100`))
}
init <- function(soci){
soci$Course <- as.factor(soci$Course)
soci <- soci[!soci$Section %in% "OVERALL",]
soci$Professor <- factor(soci$Professor)
return(soci)
}
init_overall <- function(soci){
soci$Course <- as.factor(soci$Course)
soci <- soci[soci$Section %in% "OVERALL",]
soci$Professor <- factor(soci$Professor)
return(soci)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#for(i in list){
#        data[[i]] <- init(read.csv(paste(data_loc,"/",i,sep = "")))
#}
# Chunk 2
## The shiny part
inputPanel(
selectInput("subject", label = "Subject",
list))
activeDataset <- reactive({
return(init(read.csv(paste(data_loc,"/",input$subject,sep = ""))))
})
activeDataset_overall <- reactive({
return(init_overall(read.csv(paste(data_loc,"/",input$subject,sep = ""))))
})
get_course_list <- reactive({
temp <- activeDataset()
return(temp[,"Course"])
})
renderUI({
selectInput("Course", "Select Course Number", get_course_list() )
})
# Chunk 3
DT::renderDataTable({
#t_m <- init(read.csv(paste(data_loc,"/",input$subject,sep = "")))
t_m <- activeDataset()
t_m <- t_m[t_m$Course %in% input$Course,]
t_m <- t_m[,c("Subject","Course","Section","Title","Professor", "Avg","High","Low", "Std.dev")]
DT::datatable(t_m, rownames = FALSE,options = list(scrollX = TRUE,pageLength = 5,lengthMenu = c(5, 8)))
})
renderPlot({
t_m <- activeDataset_overall()
t_m <- t_m[t_m$Course %in% input$Course,]
t_m$Professor <- paste(t_m$Professor, t_m$Section, sep = "_")
title <- t_m[1,c("Subject","Course")]
temp_title <- paste(title[1,1],title[1,2],sep = "")
t_m <- t_m[,c("Professor", per)]
t_m <- merge_per(t_m)
mdf <- melt(t_m, id = "Professor")
total <- sum(mdf$value)
mdf$value <- mdf$value/total
mdf$pos <- cumsum(mdf$value) - mdf$value/2
p <- ggplot(mdf,aes(x = factor(1),y = value, fill = variable)) + geom_bar(stat="identity", color='black')+geom_text(aes(x = 1.25, y = pos,label = value))
+ coord_polar(theta='y') +guides(fill=guide_legend(override.aes=list(colour=NA))) + theme(axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
axis.text.y=element_blank()) # the 0.75, 1.00, 1.25 labels.
p
#p <- list()
# for(i in 1:nrow(t_m)){
#         mdf <- melt(t_m[1,], id = "Professor")
#         p[[i]] <- ggplot(mdf, aes(x = factor(1), fill = factor(value))) +geom_bar(width = 1)+coord_polar(theta = "y")
# }
# ggpie <- function (dat, by, totals) {
#     ggplot(dat, aes_string(x=factor(1), y=totals, fill=by)) +
#         geom_bar(stat='identity', color='black') +
#         guides(fill=guide_legend(override.aes=list(colour=NA))) + # removes black borders from legend
#         coord_polar(theta='y') +
#         theme(axis.ticks=element_blank(),
#             axis.text.y=element_blank(),
#             axis.text.x=element_text(colour='black'),
#             axis.title=element_blank()) #+
#     + scale_y_continuous(breaks=cumsum(dat[[totals]]) - dat[[totals]] / 2, labels=dat[[by]])
# }
# library(grid)
# ggpie(mdf, by='variable', totals='value')+
#     theme(axis.ticks.margin=unit(0,"lines"),
#           plot.margin=rep(unit(0, "lines"),4))
})
View(mdf)
mdf <-melt(t_m, id = "Professor")
View(mdf)
mdf <-melt(temp1, id = "Professor")
View(mdf)
total <- sum(mdf$value)
mdf$value <- mdf$value/total
View(mdf)
mdf$pos <- cumsum(mdf$value) - mdf$value/2
View(mdf)
p <- ggplot(mdf,aes(x = factor(1),y = value, fill = variable)) + geom_bar(stat="identity", color='black')#+geom_text(aes(x = 1.25, y = pos,label = value))
+ coord_polar(theta='y') +guides(fill=guide_legend(override.aes=list(colour=NA))) + theme(axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
axis.text.y=element_blank())
p <- ggplot(mdf,aes(x = factor(1),y = value, fill = variable)) + geom_bar(stat="identity", color='black')#+geom_text(aes(x = 1.25, y = pos,label = value))
+ coord_polar(theta="y") +guides(fill=guide_legend(override.aes=list(colour=NA))) + theme(axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
axis.text.y=element_blank())
p <- ggplot(mdf,aes(x = factor(1),y = value, fill = variable)) + geom_bar(stat="identity", color='black')
+ coord_polar(theta="y")
p <- ggplot(mdf,aes(x = factor(1),y = value, fill = variable)) + geom_bar(stat="identity", color='black')
p + coord_polar(theta = 'y')
p <- ggplot(mdf,aes(x = factor(1),y = value, fill = variable)) + geom_bar(stat="identity", color='black')
+ geom_text(aes(x = 1, y = pos, label = value), size = 4)
p <- ggplot(mdf,aes(x = factor(1),y = value, fill = variable)) + geom_bar(stat="identity", color='black')+ geom_text(aes(x = 1, y = pos, label = value), size = 4)
View(mdf)
